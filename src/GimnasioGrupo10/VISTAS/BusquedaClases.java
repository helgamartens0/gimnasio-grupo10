/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GimnasioGrupo10.VISTAS;

import GimnasioGrupo10.ACCESO_A_DATOS.ClaseData;
import GimnasioGrupo10.ACCESO_A_DATOS.EntrenadorData;
import GimnasioGrupo10.ENTIDADES.Clase;
import GimnasioGrupo10.ENTIDADES.Entrenador;
import java.awt.event.ItemEvent;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author helga
 */
public class BusquedaClases extends javax.swing.JInternalFrame {

    private ArrayList<Clase> listaClases;
    private ArrayList<Entrenador> listaEntrenadores;
    private EntrenadorData entrenadorD;
    private ClaseData clasesD;
    private DefaultTableModel modelo;

    public BusquedaClases() {

        initComponents();
        clasesD = new ClaseData();
        entrenadorD = new EntrenadorData();

        modelo = new DefaultTableModel();
        modelo.setRowCount(0);

        listaEntrenadores = entrenadorD.listarEntrenadoresActivos();
        armarCabeceraTabla();
        cargarHorarios();
        cargarEntrenadores();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jcNombreClase = new javax.swing.JCheckBox();
        jcNombreEntrenador = new javax.swing.JCheckBox();
        jcHorarioClase = new javax.swing.JCheckBox();
        jtNombreClase = new javax.swing.JTextField();
        jcbHorarios = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableClases = new javax.swing.JTable();
        jbSalir = new javax.swing.JButton();
        jbBuscarNombreClase = new javax.swing.JButton();
        jcbEntrenador = new javax.swing.JComboBox<>();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Busqueda de clases");

        jcNombreClase.setText("Buscar por nombre de clase: ");
        jcNombreClase.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcNombreClaseItemStateChanged(evt);
            }
        });
        jcNombreClase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcNombreClaseActionPerformed(evt);
            }
        });

        jcNombreEntrenador.setText("Buscar por nombre de entrenador: ");
        jcNombreEntrenador.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcNombreEntrenadorItemStateChanged(evt);
            }
        });

        jcHorarioClase.setText("Buscar por horario");
        jcHorarioClase.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcHorarioClaseItemStateChanged(evt);
            }
        });
        jcHorarioClase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcHorarioClaseActionPerformed(evt);
            }
        });

        jtNombreClase.setEnabled(false);
        jtNombreClase.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtNombreClaseKeyReleased(evt);
            }
        });

        jcbHorarios.setEnabled(false);
        jcbHorarios.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbHorariosItemStateChanged(evt);
            }
        });

        jTableClases.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Entrenador", "Hora", "Capacidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableClases.setEnabled(false);
        jScrollPane1.setViewportView(jTableClases);

        jbSalir.setText("SALIR");
        jbSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbSalirMouseClicked(evt);
            }
        });

        jbBuscarNombreClase.setText("Buscar");
        jbBuscarNombreClase.setEnabled(false);
        jbBuscarNombreClase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarNombreClaseActionPerformed(evt);
            }
        });

        jcbEntrenador.setEnabled(false);
        jcbEntrenador.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbEntrenadorItemStateChanged(evt);
            }
        });
        jcbEntrenador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbEntrenadorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSalir))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcNombreClase, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcNombreEntrenador)
                            .addComponent(jcHorarioClase, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtNombreClase)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jcbHorarios, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jcbEntrenador, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbBuscarNombreClase)))
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbSalir))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jcNombreClase)
                            .addComponent(jtNombreClase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbBuscarNombreClase))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jcNombreEntrenador)
                            .addComponent(jcbEntrenador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jcHorarioClase)
                            .addComponent(jcbHorarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcNombreClaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcNombreClaseActionPerformed

    }//GEN-LAST:event_jcNombreClaseActionPerformed

    private void jcHorarioClaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcHorarioClaseActionPerformed


    }//GEN-LAST:event_jcHorarioClaseActionPerformed

    private void jcNombreClaseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcNombreClaseItemStateChanged

        if (jcNombreClase.isSelected()) {
            jbBuscarNombreClase.setEnabled(true);
            jcNombreEntrenador.setEnabled(false);
            jcHorarioClase.setEnabled(false);
            jtNombreClase.setEnabled(true);
        } else {
            jbBuscarNombreClase.setEnabled(false);
            jcNombreEntrenador.setEnabled(true);
            jcHorarioClase.setEnabled(true);
            jtNombreClase.setEnabled(false);
        }

    }//GEN-LAST:event_jcNombreClaseItemStateChanged

    private void jcNombreEntrenadorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcNombreEntrenadorItemStateChanged

        if (jcNombreEntrenador.isSelected()) {
            jcNombreClase.setEnabled(false);
            jcHorarioClase.setEnabled(false);
            jcbEntrenador.setEnabled(true);
        } else {
            jcNombreClase.setEnabled(true);
            jcHorarioClase.setEnabled(true);
            jcbEntrenador.setEnabled(false);
        }

    }//GEN-LAST:event_jcNombreEntrenadorItemStateChanged

    private void jcHorarioClaseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcHorarioClaseItemStateChanged

        if (jcHorarioClase.isSelected()) {
            jcNombreClase.setEnabled(false);
            jcNombreEntrenador.setEnabled(false);
            jcbHorarios.setEnabled(true);
        } else {
            jcNombreClase.setEnabled(true);
            jcNombreEntrenador.setEnabled(true);
            jcbHorarios.setEnabled(false);
        }

    }//GEN-LAST:event_jcHorarioClaseItemStateChanged
    /*NOTA: el ItemStatedChanged se asocia con un ItemListener, que detecta los cambios
    en el estado de componentes como JCheckBox, JRadioButton o JComboBox*/


    private void jbSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbSalirMouseClicked
        dispose();
    }//GEN-LAST:event_jbSalirMouseClicked

    private void jtNombreClaseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtNombreClaseKeyReleased
    }//GEN-LAST:event_jtNombreClaseKeyReleased

    private void jbBuscarNombreClaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarNombreClaseActionPerformed
        cargarDatosNombreClase();
    }//GEN-LAST:event_jbBuscarNombreClaseActionPerformed

    private void jcbEntrenadorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbEntrenadorItemStateChanged
        // Obtener el texto seleccionado del JComboBox

        String selec = String.valueOf(jcbEntrenador.getSelectedItem().toString());
        if (selec != null && !selec.isEmpty()) {
            // Asumiendo que el formato es "id - nombre apellido"
            String[] partes = selec.split(" - ");
            String[] nombreApellido = partes[1].split(" ");
            String nombreEntrenador = nombreApellido[0];
            String apellidoEntrenador = nombreApellido[1];

            // Llamar al método de búsqueda
            ArrayList<Clase> clases = clasesD.buscarClasesEntrenador(nombreEntrenador, apellidoEntrenador);

            //limpiamos antes de agregar nuevos datos
            modelo.setRowCount(0);

            //llenamos la tabla 
            for (Clase clase : clases) {
                Object[] dato = new Object[]{
                    clase.getNombre_clase(),
                    clase.getEntrenador().getNombre_entrenador(),
                    clase.getHora_clase().toString(),
                    clase.getCapacidad_clase()
                };
                modelo.addRow(dato);
            }
        }
    }//GEN-LAST:event_jcbEntrenadorItemStateChanged

    private void jcbEntrenadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbEntrenadorActionPerformed

    }//GEN-LAST:event_jcbEntrenadorActionPerformed
    
    
    private void jcbHorariosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbHorariosItemStateChanged
        // TODO add your handling code here:
        modelo.setRowCount(0);
        
        LocalTime hs = (LocalTime) jcbHorarios.getSelectedItem();
        Clase cla = clasesD.buscarClaseHorario(hs);
        
        if (cla != null) {
            Object[] dato = new Object[]{cla.getNombre_clase(), cla.getEntrenador().getNombre_entrenador() + " " + cla.getEntrenador().getApellido_entrenador(),
                cla.getHora_clase().toString(), cla.getCapacidad_clase()
            };
            modelo.addRow(dato);
        } else {
            JOptionPane.showMessageDialog(this, "No hay clases en ese horario");
        }

    }//GEN-LAST:event_jcbHorariosItemStateChanged

    private void cargarDatosNombreClase() {
        String nombreClase = jtNombreClase.getText().trim(); //trim elimina los espacios en blanco de los extremos
        listaClases = clasesD.buscarClaseNombre(nombreClase);
        //limpiamos antes de agregar nuevos datos
        modelo.setRowCount(0);

        //llenamos la tabla 
        for (Clase clase : listaClases) {
            Object[] dato = new Object[]{
                clase.getNombre_clase(),
                clase.getEntrenador().getNombre_entrenador(),
                clase.getHora_clase().toString(),
                clase.getCapacidad_clase()
            };
            modelo.addRow(dato);
        }
    }

    private void armarCabeceraTabla() {
        ArrayList<Object> filaCabecera = new ArrayList<>();
        filaCabecera.add("Nombre");
        filaCabecera.add("Entrenador");
        filaCabecera.add("Hora");
        filaCabecera.add("Capacidad");
        for (Object it : filaCabecera) {
            modelo.addColumn(it);
        }
        jTableClases.setModel(modelo);
    }

    private void cargarHorarios() {
        // Lista de horarios disponibles
        List<LocalTime> horarios = new ArrayList<>();
        // Agregar horarios desde las 8:00 hasta las 20:00, con intervalos de una hora
        LocalTime hora = LocalTime.of(8, 0);
        while (hora.isBefore(LocalTime.of(20, 0))) {
            horarios.add(hora);
            hora = hora.plusHours(1);
        }
        for (LocalTime horario : horarios) {
            jcbHorarios.addItem(horario);
        }

    }

    private void cargarEntrenadores() {
        jcbEntrenador.addItem("");
        for (Entrenador entr : listaEntrenadores) {
            String datos = entr.toString();
            jcbEntrenador.addItem(datos);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableClases;
    private javax.swing.JButton jbBuscarNombreClase;
    private javax.swing.JButton jbSalir;
    private javax.swing.JCheckBox jcHorarioClase;
    private javax.swing.JCheckBox jcNombreClase;
    private javax.swing.JCheckBox jcNombreEntrenador;
    private javax.swing.JComboBox<String> jcbEntrenador;
    private javax.swing.JComboBox<LocalTime> jcbHorarios;
    private javax.swing.JTextField jtNombreClase;
    // End of variables declaration//GEN-END:variables
}
